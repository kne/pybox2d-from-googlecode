to_replace=[
    ('CreateDynamicBody', 'create_dynamic_body'),
    ('CreateStaticBody', 'create_static_body'),
    ('CreateKinematicBody', 'create_kinematic_body'),
    ('DestroyBody', 'destroy_body'),
    ('DestroyFixture', 'destroy_fixture'),
    ('CreateFixture',  'create_fixture'),
    ('GetWorldPoint',  'get_world_point'),
    ('GetWorldVector',  'get_world_vector'),
    ('GetLocalPoint',  'get_local_point'),
    ('GetLocalVector',  'get_local_vector'),
    ('CreateCircleFixture', 'create_circle_fixture'),
    ('CreatePolygonFixture', 'create_polygon_fixture'),
    ('CreateEdgeFixture', 'create_edge_fixture'),
    ('CreateLoopFixture', 'create_loop_fixture'),
    ('CreateEdgeChain', 'create_loop_fixture'),
    ('Keyboard', 'key_down'),
    ('KeyboardUp', 'key_up'),
    ('b2_kinematicBody', 'b2.Body.KINEMATIC'),
    ('b2_staticBody', 'b2.Body.STATIC'),
    ('b2_dynamicBody', 'b2.Body.DYNAMIC'),
    ('angularVelocity', 'angular_velocity'),
    ('linearVelocity', 'linear_velocity'),
    ('enableMotor', 'motor_enabled'),
    ('enableLimit', 'limit_enabled'),
    ('maxMotorForce', 'max_motor_force'),
    ('maxMotorTorque', 'max_motor_torque'),
    ('lowerLimit', 'lower_limit'),
    ('upperLimit', 'upper_limit'),
    ('lowerTranslation', 'lower_limit'),
    ('upperTranslation', 'upper_limit'),
    ('b2PolygonShape', 'b2.Polygon'),
    ('b2CircleShape', 'b2.Circle'),
    ('b2EdgeShape', 'b2.Edge'),
    ('b2LoopShape', 'b2.Loop'),
    ('b2FixtureDef', 'b2.Fixture'),
    ('edgeShape', 'b2.Edge'),
    ('loopShape', 'b2.Loop'),
    ('polygonShape', 'b2.Polygon'),
    ('circleShape', 'b2.Circle'),
    ('fixtureDef', 'b2.Fixture'),
    ('CreateDistanceJoint',  'create_distance_joint'),
    ('CreateRevoluteJoint',  'create_revolute_joint'),
    ('CreateFrictionJoint',  'create_friction_joint'),
    ('CreatePrismaticJoint', 'create_prismatic_joint'),
    ('CreateWeldJoint',      'create_weld_joint'),
    ('CreateRopeJoint',      'create_rope_joint'),
    ('CreateWheelJoint',     'create_wheel_joint'),
    ('CreateMouseJoint',     'create_mouse_joint'),
    ('CreatePulleyJoint',    'create_pulley_joint'),
    ('CreateGearJoint',      'create_gear_joint'),
    ('DistanceJoint',  'distance_joint'),
    ('RevoluteJoint',  'revolute_joint'),
    ('FrictionJoint',  'friction_joint'),
    ('PrismaticJoint', 'prismatic_joint'),
    ('WeldJoint',      'weld_joint'),
    ('RopeJoint',      'rope_joint'),
    ('WheelJoint',     'wheel_joint'),
    ('MouseJoint',     'mouse_joint'),
    ('PulleyJoint',    'pulley_joint'),
    ('GearJoint',      'gear_joint'),
    ('bodyA',      'body_a'),
    ('bodyB',      'body_b'),
    ('userData',      'user_data'),
    ('b2Vec2',      'Vec2'),
    ('b2Mat22',      'Mat22'),
    ('b2Mat33',      'Mat33'),
    ('.Normalize',      '.normalize'),
    ('.Length',      '.length'),
    ('self.Print', 'self.print_'),
    ('b2_pi', 'PI'),
    ('shapeFixture', 'shape_fixture'),
    ('def Step', 'def post_step'),
    ('def post_step(self, settings):', 'def post_step(self):'),
    ('worldCenter', 'world_center'),
    ('prevBody', 'prev_body'),
    ('CreateBody', 'create_static_body'),
    ('numPlanks', 'num_planks'),
    ('b2Random', 'rand_float'),
    ('dampingRatio', 'damping_ratio'),
    ('frequencyHz', 'frequency'),
    ('lowerAngle', 'lower_angle'),
    ('upperAngle', 'upper_angle'),
    ('frequencyHz', 'frequency'),
    ('motorSpeed', 'motor_speed'),
    ('body_a=', ''),
    ('body_b=', ''),
    ('fixedRotation', 'fixed_rotation'),
    ('allowSleep', 'allow_sleep'),
    ('localAnchorA', 'local_anchor_a'),
    ('localAnchorB', 'local_anchor_b'),
    ('localAxis1', 'local_axis_a'),
    ('local_axis_a', 'local_x_axis'),
    ('localAxis2', 'local_axis_b'),
]

import os

def do_replace(fn):
    lines = open(fn, 'rt').readlines()
    out_lines = []
    for line in lines:
        for replace, with_ in to_replace:
            line = line.replace(replace, with_)
        out_lines.append(line)
    open(fn, 'wt').writelines(out_lines)

for fn in os.listdir('.'):
    if fn.endswith('.py') and fn not in ('do_rename.py', ):
        do_replace(fn)
