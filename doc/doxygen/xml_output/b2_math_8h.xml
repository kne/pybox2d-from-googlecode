<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.2">
  <compounddef id="b2_math_8h" kind="file">
    <compoundname>b2Math.h</compoundname>
    <includes refid="b2_settings_8h" local="no">Box2D/Common/b2Settings.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cfloat</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">limits</includes>
    <includedby refid="b2_collision_8h" local="no">Box2D/Collision/b2Collision.h</includedby>
    <includedby refid="b2_distance_8h" local="no">Box2D/Collision/b2Distance.h</includedby>
    <includedby refid="b2_time_of_impact_8h" local="no">Box2D/Collision/b2TimeOfImpact.h</includedby>
    <includedby refid="b2_shape_8h" local="no">Box2D/Collision/Shapes/b2Shape.h</includedby>
    <includedby refid="b2_math_8cpp" local="no">Box2D/Common/b2Math.cpp</includedby>
    <includedby refid="b2_stack_allocator_8cpp" local="no">Box2D/Common/b2StackAllocator.cpp</includedby>
    <includedby refid="b2_body_8h" local="no">Box2D/Dynamics/b2Body.h</includedby>
    <includedby refid="b2_island_8h" local="no">Box2D/Dynamics/b2Island.h</includedby>
    <includedby refid="b2_world_8h" local="no">Box2D/Dynamics/b2World.h</includedby>
    <includedby refid="b2_contact_8h" local="no">Box2D/Dynamics/Contacts/b2Contact.h</includedby>
    <includedby refid="b2_contact_solver_8h" local="no">Box2D/Dynamics/Contacts/b2ContactSolver.h</includedby>
    <includedby refid="b2_joint_8h" local="no">Box2D/Dynamics/Joints/b2Joint.h</includedby>
    <incdepgraph>
      <node id="117">
        <label>limits</label>
      </node>
      <node id="110">
        <label>Box2D/Common/b2Math.h</label>
        <link refid="b2Math.h"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>cmath</label>
      </node>
      <node id="112">
        <label>cassert</label>
      </node>
      <node id="115">
        <label>cfloat</label>
      </node>
      <node id="114">
        <label>Python.h</label>
      </node>
      <node id="111">
        <label>Box2D/Common/b2Settings.h</label>
        <link refid="b2_settings_8h"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>cstddef</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="118">
        <label>Box2D/Common/b2Math.h</label>
        <link refid="b2Math.h"/>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>Box2D/Collision/b2Collision.h</label>
        <link refid="b2_collision_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structb2_vec2" prot="public">b2Vec2</innerclass>
    <innerclass refid="structb2_vec3" prot="public">b2Vec3</innerclass>
    <innerclass refid="structb2_mat22" prot="public">b2Mat22</innerclass>
    <innerclass refid="structb2_mat33" prot="public">b2Mat33</innerclass>
    <innerclass refid="structb2_transform" prot="public">b2Transform</innerclass>
    <innerclass refid="structb2_sweep" prot="public">b2Sweep</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="b2_math_8h_1a58e7c8ed67b5f0f98a0873cfb0035076" prot="public" static="no">
        <name>b2Sqrt</name>
        <param><defname>x</defname></param>
        <initializer>std::sqrt(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="60" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b2_math_8h_1afe19f6449028d2aaa14c9c4c3b22066d" prot="public" static="no">
        <name>b2Atan2</name>
        <param><defname>y</defname></param>
        <param><defname>x</defname></param>
        <initializer>std::atan2(y, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="61" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="b2_math_8h_1ad6f7495e1f1adf7369190bf3f89a60db" prot="public" static="no" mutable="no">
        <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>const b2Vec2 b2Vec2_zero</definition>
        <argsstring></argsstring>
        <name>b2Vec2_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="387"/>
      </memberdef>
      <memberdef kind="variable" id="b2_math_8h_1a776380dd2a489c6beb995d54100c1753" prot="public" static="no" mutable="no">
        <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>const b2Mat22 b2Mat22_identity</definition>
        <argsstring></argsstring>
        <name>b2Mat22_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="388"/>
      </memberdef>
      <memberdef kind="variable" id="b2_math_8h_1a040a4567d231363853fe4e5c62e0c628" prot="public" static="no" mutable="no">
        <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref></type>
        <definition>const b2Transform b2Transform_identity</definition>
        <argsstring></argsstring>
        <name>b2Transform_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="389"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2IsValid</definition>
        <argsstring>(float32 x)</argsstring>
        <name>b2IsValid</name>
        <param>
          <type>float32</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to ensure that a floating point number is not a NaN or infinity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="32" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a94db844858ec5b062e9df27f843d1552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2InvSqrt</definition>
        <argsstring>(float32 x)</argsstring>
        <name>b2InvSqrt</name>
        <param>
          <type>float32</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is a approximate yet fast inverse square-root. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="45" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a7b3d44648011b5eed0400d7d82370bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2Abs</definition>
        <argsstring>(float32 a)</argsstring>
        <name>b2Abs</name>
        <param>
          <type>float32</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="64" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2Dot</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Dot</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the dot product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="393" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2Cross</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the cross product on two vectors. In 2D this produces a scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="399" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a7b096c85fbb12ec43c813f92ede17480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Cross</definition>
        <argsstring>(const b2Vec2 &amp;a, float32 s)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the cross product on a vector and a scalar. In 2D this produces a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="406" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aa058d7bfcf20a7b49d1d22d2284fef8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Cross</definition>
        <argsstring>(float32 s, const b2Vec2 &amp;a)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>float32</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the cross product on a scalar and a vector. In 2D this produces a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="413" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply a matrix times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="420" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2MulT</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Vec2 &amp;v)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply a matrix transpose times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another (inverse transform). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="427" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator+</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="433" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a42a4d381fdfdde9aa5a3078b13f6b76b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator-</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="439" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a8a3ec3a803ef689abd6674c943eb358b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator*</definition>
        <argsstring>(float32 s, const b2Vec2 &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>float32</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="444" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1af7e4f3ac0ffef6bbd586543e2e1b04d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="449" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a55ee8f478626440779e88f2343c698b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2Distance</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Distance</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="454" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="453" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1fb7f05d9bd9a362fa2c6741cf3fbd3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2DistanceSquared</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2DistanceSquared</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="460" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="459" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ae5e8a56041cc2acb728eab2e7971f826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator*</definition>
        <argsstring>(float32 s, const b2Vec3 &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>float32</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="466" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac5671b7f3534b00e99a757eb4ade907c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator+</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="472" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac1489cdb9e1d32e58ebf0f416e710dce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator-</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="478" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1e77dac3105b68676fb43c15c0bb9ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float32</type>
        <definition>float32 b2Dot</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>b2Dot</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the dot product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="484" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a25353226a22975a6774247a74c2309db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 b2Cross</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the cross product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="490" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ad26d99f359b3a6f100d9538ce8fba78f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 operator+</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="495" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac1fb7bf7a1dcf65382301b64ed0321a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2Mul</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="501" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a6904a90ebef81abe11a580958edb0768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2MulT</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="507" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="506" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aea5a2dc18e95eea003db180aa6b65f5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 b2Mul</definition>
        <argsstring>(const b2Mat33 &amp;A, const b2Vec3 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat33" kindref="compound">b2Mat33</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Multiply a matrix times a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="515" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1adc2859334a7f260742bf13e0d506e977" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul</definition>
        <argsstring>(const b2Transform &amp;T, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="520" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a157696518d038a2b900f81e0e40ef27f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2MulT</definition>
        <argsstring>(const b2Transform &amp;T, const b2Vec2 &amp;v)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="528" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aa6a218f164938003edd5040760e36c8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_transform" kindref="compound">b2Transform</ref></type>
        <definition>b2Transform b2MulT</definition>
        <argsstring>(const b2Transform &amp;A, const b2Transform &amp;B)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="534" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="533" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a9a96bf0b2b574a8b88346e631ce85312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Abs</definition>
        <argsstring>(const b2Vec2 &amp;a)</argsstring>
        <name>b2Abs</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="542" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="541" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a4e14463da9e9a214121aedc4590822c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2Abs</definition>
        <argsstring>(const b2Mat22 &amp;A)</argsstring>
        <name>b2Abs</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="547" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ab28a6b9f890d437ecc8ffda409cbf2d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T b2Min</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>b2Min</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="553" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a87b278b32677b28124d594008742f8c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Min</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Min</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="558" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1abafa011810be2cf92cbf886e88b04499" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T b2Max</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>b2Max</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="564" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1adf07fe44a1bfc17daef355f8f1281b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Max</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Max</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="569" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a4ed838c2c4f9dfa54f07936835e9e121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T b2Clamp</definition>
        <argsstring>(T a, T low, T high)</argsstring>
        <name>b2Clamp</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>low</declname>
        </param>
        <param>
          <type>T</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="575" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a26a6e5df5af01d16c687a9d1a0d72771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Clamp</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;low, const b2Vec2 &amp;high)</argsstring>
        <name>b2Clamp</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="580" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a0632dee7a3d289e629f14d63f8fd86f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void b2Swap</definition>
        <argsstring>(T &amp;a, T &amp;b)</argsstring>
        <name>b2Swap</name>
        <param>
          <type>T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="585" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="584" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1bd53d288c039f6eeb1526bd55ce1414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 b2NextPowerOfTwo</definition>
        <argsstring>(uint32 x)</argsstring>
        <name>b2NextPowerOfTwo</name>
        <param>
          <type>uint32</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>"Next Largest Power of 2 Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm that recursively &quot;folds&quot; the upper bits into the lower bits. This process yields a bit vector with the same most significant 1 as x, but all 1&apos;s below it. Adding 1 to that value yields the next largest power of 2. For a 32-bit value:" </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="597" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="596" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a8c73c20bd0705c5a19148486ae305a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2IsPowerOfTwo</definition>
        <argsstring>(uint32 x)</argsstring>
        <name>b2IsPowerOfTwo</name>
        <param>
          <type>uint32</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Common/b2Math.h" line="607" bodyfile="D:/pybox2d/Box2D/Common/b2Math.h" bodystart="606" bodyend="610"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2006-2009<sp/>Erin<sp/>Catto<sp/>http://www.gphysics.com</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>B2_MATH_H</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>B2_MATH_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="b2_settings_8h" kindref="compound">Box2D/Common/b2Settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b2IsValid(float32<sp/>x)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>x)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>infinity<sp/>=<sp/>std::numeric_limits&lt;float32&gt;::infinity();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-infinity<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>x<sp/>&lt;<sp/>infinity;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2InvSqrt(float32<sp/>x)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>x;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>convert;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert.x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>xhalf<sp/>=<sp/>0.5f<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert.i<sp/>=<sp/>0x5f3759df<sp/>-<sp/>(convert.i<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>convert.x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>*<sp/>(1.5f<sp/>-<sp/>xhalf<sp/>*<sp/>x<sp/>*<sp/>x);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>b2Sqrt(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(x)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>b2Atan2(y,<sp/>x)<sp/><sp/><sp/>std::atan2(y,<sp/>x)</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2Abs(float32<sp/>a)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>0.0f<sp/>?<sp/>a<sp/>:<sp/>-a;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structb2_vec2" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2_1a9171b31deb83af96872f99689939a12f" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec2</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2_1a9171b31deb83af96872f99689939a12f" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec2</ref>(float32<sp/>x,<sp/>float32<sp/>y)<sp/>:<sp/>x(x),<sp/>y(y)<sp/>{}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a5c6cbe27cfb29c6dbb29b9a3285b88d0" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>()<sp/>{<sp/>x<sp/>=<sp/>0.0f;<sp/>y<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a4d61640a645e470a50b451307d8e94c3" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(float32<sp/>x_,<sp/>float32<sp/>y_)<sp/>{<sp/>x<sp/>=<sp/>x_;<sp/>y<sp/>=<sp/>y_;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_vec2_1ab1f648091d3cba00b4c132758fcf4450" kindref="member" tooltip="Negate this vector.">operator -</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>v;<sp/>v.<ref refid="structb2_vec2_1a4d61640a645e470a50b451307d8e94c3" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(-x,<sp/>-y);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_vec2_1a9cb67b5f755b82d40673337a3652d81f" kindref="member" tooltip="Read from and indexed element.">operator () </ref>(int32<sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="88"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;x)[i];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32&amp;<sp/><ref refid="structb2_vec2_1a9cb67b5f755b82d40673337a3652d81f" kindref="member" tooltip="Read from and indexed element.">operator () </ref>(int32<sp/>i)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;x)[i];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a590789342e22ac1e7f9c1a63a2778b6d" kindref="member" tooltip="Add a vector to this vector.">operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>v.x;<sp/>y<sp/>+=<sp/>v.y;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a6b48cab4695a979ae40b7613aedc8b17" kindref="member" tooltip="Subtract a vector from this vector.">operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>v.x;<sp/>y<sp/>-=<sp/>v.y;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a7097696dce578322928f4535b34f1c6b" kindref="member" tooltip="Multiply this vector by a scalar.">operator *= </ref>(float32<sp/>a)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>a;<sp/>y<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="118"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Sqrt(x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_vec2_1af66641b887488490e2168bfafc5a7e36" kindref="member">LengthSquared</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_vec2_1adda78c92f318fe53d8a53f9b5cfd8e41" kindref="member" tooltip="Convert this vector into a unit vector. Returns the length.">Normalize</ref>()</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>length<sp/>=<sp/><ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>b2_epsilon)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>invLength<sp/>=<sp/>1.0f<sp/>/<sp/>length;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>invLength;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>*=<sp/>invLength;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1aafb971cf7cc726f91fc3a8215fb0aa17" kindref="member" tooltip="Does this vector contain finite coordinates?">IsValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="146"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2IsValid(x)<sp/>&amp;&amp;<sp/>b2IsValid(y);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="structb2_vec3" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3_1a837423f66d6fb72d815e7390c09938b9" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec3</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3_1a837423f66d6fb72d815e7390c09938b9" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec3</ref>(float32<sp/>x,<sp/>float32<sp/>y,<sp/>float32<sp/>z)<sp/>:<sp/>x(x),<sp/>y(y),<sp/>z(z)<sp/>{}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>()<sp/>{<sp/>x<sp/>=<sp/>0.0f;<sp/>y<sp/>=<sp/>0.0f;<sp/>z<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a12a1bc14bbe722dfb175a492d2d00a79" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(float32<sp/>x_,<sp/>float32<sp/>y_,<sp/>float32<sp/>z_)<sp/>{<sp/>x<sp/>=<sp/>x_;<sp/>y<sp/>=<sp/>y_;<sp/>z<sp/>=<sp/>z_;<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="structb2_vec3_1a246cb7ed59d3e758989939ed4e30e5ec" kindref="member" tooltip="Negate this vector.">operator -</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>v;<sp/>v.<ref refid="structb2_vec3_1a12a1bc14bbe722dfb175a492d2d00a79" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(-x,<sp/>-y,<sp/>-z);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a2aaeed3f5308aad85d19c5f0efc72641" kindref="member" tooltip="Add a vector to this vector.">operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>v.x;<sp/>y<sp/>+=<sp/>v.y;<sp/>z<sp/>+=<sp/>v.z;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a9e5b535548e1c5dfc0dc258d08f5ca32" kindref="member" tooltip="Subtract a vector from this vector.">operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>v.x;<sp/>y<sp/>-=<sp/>v.y;<sp/>z<sp/>-=<sp/>v.z;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1aaa9aa20195cd0ee53c7176a9a9b02389" kindref="member" tooltip="Multiply this vector by a scalar.">operator *= </ref>(float32<sp/>s)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>s;<sp/>y<sp/>*=<sp/>s;<sp/>z<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>x,<sp/>y,<sp/>z;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structb2_mat22" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref></highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>(float32<sp/>a11,<sp/>float32<sp/>a12,<sp/>float32<sp/>a21,<sp/>float32<sp/>a22)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.x<sp/>=<sp/>a11;<sp/>col1.y<sp/>=<sp/>a21;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2.x<sp/>=<sp/>a12;<sp/>col2.y<sp/>=<sp/>a22;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>(float32<sp/>angle)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO_ERIN<sp/>compute<sp/>sin+cos<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>c<sp/>=<sp/>cosf(angle),<sp/>s<sp/>=<sp/>sinf(angle);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.x<sp/>=<sp/>c;<sp/>col2.x<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.y<sp/>=<sp/>s;<sp/>col2.y<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" kindref="member" tooltip="Initialize this matrix using columns.">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" kindref="member" tooltip="Initialize this matrix using columns.">Set</ref>(float32<sp/>angle)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>c<sp/>=<sp/>cosf(angle),<sp/>s<sp/>=<sp/>sinf(angle);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.x<sp/>=<sp/>c;<sp/>col2.x<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.y<sp/>=<sp/>s;<sp/>col2.y<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1a7192f063b771ac9ded060e41df890509" kindref="member" tooltip="Set this to the identity matrix.">SetIdentity</ref>()</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.x<sp/>=<sp/>1.0f;<sp/>col2.x<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.y<sp/>=<sp/>0.0f;<sp/>col2.y<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1aaeae95f61cf3171ffb94703980e3594b" kindref="member" tooltip="Set this matrix to all zeros.">SetZero</ref>()</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.x<sp/>=<sp/>0.0f;<sp/>col2.x<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.y<sp/>=<sp/>0.0f;<sp/>col2.y<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_mat22_1a2ed72f76fa7af7c6e01dc57493f45acd" kindref="member">GetAngle</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="255"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Atan2(col1.y,<sp/>col1.x);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>GetInverse()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="260"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>a<sp/>=<sp/>col1.x,<sp/>b<sp/>=<sp/>col2.x,<sp/>c<sp/>=<sp/>col1.y,<sp/>d<sp/>=<sp/>col2.y;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>B;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>det<sp/>=<sp/>a<sp/>*<sp/>d<sp/>-<sp/>b<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(det<sp/>!=<sp/>0.0f)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.col1.x<sp/>=<sp/><sp/>det<sp/>*<sp/>d;<sp/><sp/><sp/><sp/>B.col2.x<sp/>=<sp/>-det<sp/>*<sp/>b;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.col1.y<sp/>=<sp/>-det<sp/>*<sp/>c;<sp/><sp/><sp/><sp/>B.col2.y<sp/>=<sp/><sp/>det<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_mat22_1ab511ad33f5abf87351581842628a9dc3" kindref="member">Solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="276"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>a11<sp/>=<sp/>col1.x,<sp/>a12<sp/>=<sp/>col2.x,<sp/>a21<sp/>=<sp/>col1.y,<sp/>a22<sp/>=<sp/>col2.y;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>det<sp/>=<sp/>a11<sp/>*<sp/>a22<sp/>-<sp/>a12<sp/>*<sp/>a21;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(det<sp/>!=<sp/>0.0f)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>x;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.x<sp/>=<sp/>det<sp/>*<sp/>(a22<sp/>*<sp/>b.x<sp/>-<sp/>a12<sp/>*<sp/>b.y);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.y<sp/>=<sp/>det<sp/>*<sp/>(a11<sp/>*<sp/>b.y<sp/>-<sp/>a21<sp/>*<sp/>b.x);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>col1,<sp/>col2;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">};</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="structb2_mat33" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref></highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a1f4d7ddf1c8a202fc08ec64dfe191463" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat33</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a1f4d7ddf1c8a202fc08ec64dfe191463" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat33</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c3)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col3<sp/>=<sp/>c3;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33_1a42fc6953b025e1c8b59717d0ee7accde" kindref="member" tooltip="Set this matrix to all zeros.">SetZero</ref>()</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col1.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col2.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col3.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="structb2_mat33_1a478872c7b6a3bedd13fbedd3ec7a2edb" kindref="member">Solve33</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_mat33_1a2580ac2afadc48028a63ed4c8a1f16bc" kindref="member">Solve22</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>col1,<sp/>col2,<sp/>col3;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="structb2_transform" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_transform" kindref="compound">b2Transform</ref></highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a765a2e5c692a2e1d05c7a5441019373d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Transform</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a765a2e5c692a2e1d05c7a5441019373d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Transform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>R)<sp/>:<sp/>position(position),<sp/>R(R)<sp/>{}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_transform_1af92af4ec6833552b1b22a6ca6d4f5644" kindref="member" tooltip="Set this to the identity transform.">SetIdentity</ref>()</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.<ref refid="structb2_vec2_1a5c6cbe27cfb29c6dbb29b9a3285b88d0" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.<ref refid="structb2_mat22_1a7192f063b771ac9ded060e41df890509" kindref="member" tooltip="Set this to the identity matrix.">SetIdentity</ref>();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_transform_1af38202dd9730d06531271b3daa6737af" kindref="member" tooltip="Set this based on the position and angle.">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>p,<sp/>float32<sp/>angle)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.<ref refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" kindref="member" tooltip="Initialize this matrix using columns.">Set</ref>(angle);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_transform_1aaa6ceb4d1b209a19a2b50eaefca40526" kindref="member" tooltip="Calculate the angle that the rotation matrix represents.">GetAngle</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="352"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Atan2(R.col1.y,<sp/>R.col1.x);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>position;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>R;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="structb2_sweep" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_sweep" kindref="compound">b2Sweep</ref></highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a6a78abe0478c9752cd0166df6ec52b1e" kindref="member">GetTransform</ref>(<ref refid="structb2_transform" kindref="compound">b2Transform</ref>*<sp/>xf,<sp/>float32<sp/>beta)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a35eb9b976ca87c9b8d758bec070c6c06" kindref="member">Advance</ref>(float32<sp/>alpha);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1ad66a3086bc7656df9cf7454013a2f61b" kindref="member" tooltip="Normalize the angles.">Normalize</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_sweep_1a4bcc302cf78771896d6256fc53f2f8be" kindref="member" tooltip="local center of mass position">localCenter</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c0,<sp/><ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>a0,<sp/><ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Vec2_zero;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>b2Mat22_identity;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/>b2Transform_identity;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2Dot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2Cross(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>*<sp/>b.y<sp/>-<sp/>a.y<sp/>*<sp/>b.x;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Cross(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/>float32<sp/>s)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(s<sp/>*<sp/>a.y,<sp/>-s<sp/>*<sp/>a.x);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Cross(float32<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(-s<sp/>*<sp/>a.y,<sp/>s<sp/>*<sp/>a.x);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(A.col1.x<sp/>*<sp/>v.x<sp/>+<sp/>A.col2.x<sp/>*<sp/>v.y,<sp/>A.col1.y<sp/>*<sp/>v.x<sp/>+<sp/>A.col2.y<sp/>*<sp/>v.y);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2MulT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(b2Dot(v,<sp/>A.col1),<sp/>b2Dot(v,<sp/>A.col2));</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(a.x<sp/>+<sp/>b.x,<sp/>a.y<sp/>+<sp/>b.y);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(a.x<sp/>-<sp/>b.x,<sp/>a.y<sp/>-<sp/>b.y);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>operator<sp/>*<sp/>(float32<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(s<sp/>*<sp/>a.x,<sp/>s<sp/>*<sp/>a.y);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>==<sp/>b.x<sp/>&amp;&amp;<sp/>a.y<sp/>==<sp/>b.y;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2Distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.<ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2DistanceSquared(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Dot(c,<sp/>c);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>operator<sp/>*<sp/>(float32<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(s<sp/>*<sp/>a.x,<sp/>s<sp/>*<sp/>a.y,<sp/>s<sp/>*<sp/>a.z);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.x<sp/>+<sp/>b.x,<sp/>a.y<sp/>+<sp/>b.y,<sp/>a.z<sp/>+<sp/>b.z);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>operator<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.x<sp/>-<sp/>b.x,<sp/>a.y<sp/>-<sp/>b.y,<sp/>a.z<sp/>-<sp/>b.z);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32<sp/>b2Dot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>*<sp/>b.x<sp/>+<sp/>a.y<sp/>*<sp/>b.y<sp/>+<sp/>a.z<sp/>*<sp/>b.z;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>b2Cross(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.y<sp/>*<sp/>b.z<sp/>-<sp/>a.z<sp/>*<sp/>b.y,<sp/>a.z<sp/>*<sp/>b.x<sp/>-<sp/>a.x<sp/>*<sp/>b.z,<sp/>a.x<sp/>*<sp/>b.y<sp/>-<sp/>a.y<sp/>*<sp/>b.x);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>operator<sp/>+<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(A.col1<sp/>+<sp/>B.col1,<sp/>A.col2<sp/>+<sp/>B.col2);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>*<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>b2Mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(b2Mul(A,<sp/>B.col1),<sp/>b2Mul(A,<sp/>B.col2));</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A^T<sp/>*<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>b2MulT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c1(b2Dot(A.col1,<sp/>B.col1),<sp/>b2Dot(A.col2,<sp/>B.col1));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c2(b2Dot(A.col1,<sp/>B.col2),<sp/>b2Dot(A.col2,<sp/>B.col2));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(c1,<sp/>c2);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>b2Mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.x<sp/>*<sp/>A.col1<sp/>+<sp/>v.y<sp/>*<sp/>A.col2<sp/>+<sp/>v.z<sp/>*<sp/>A.col3;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>T,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>x<sp/>=<sp/>T.position.x<sp/>+<sp/>T.R.col1.x<sp/>*<sp/>v.x<sp/>+<sp/>T.R.col2.x<sp/>*<sp/>v.y;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>y<sp/>=<sp/>T.position.y<sp/>+<sp/>T.R.col1.y<sp/>*<sp/>v.x<sp/>+<sp/>T.R.col2.y<sp/>*<sp/>v.y;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2MulT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>T,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2MulT(T.R,<sp/>v<sp/>-<sp/>T.position);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>v2<sp/>=<sp/>A.R&apos;<sp/>*<sp/>(B.R<sp/>*<sp/>v1<sp/>+<sp/>B.p<sp/>-<sp/>A.p)<sp/>=<sp/>(A.R&apos;<sp/>*<sp/>B.R)<sp/>*<sp/>v1<sp/>+<sp/>(B.p<sp/>-<sp/>A.p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/>b2MulT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/>C;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.R<sp/>=<sp/>b2MulT(A.R,<sp/>B.R);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.position<sp/>=<sp/>B.position<sp/>-<sp/>A.position;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(b2Abs(a.x),<sp/>b2Abs(a.y));</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/>b2Abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(b2Abs(A.col1),<sp/>b2Abs(A.col2));</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>b2Min(T<sp/>a,<sp/>T<sp/>b)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Min(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(b2Min(a.x,<sp/>b.x),<sp/>b2Min(a.y,<sp/>b.y));</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>b2Max(T<sp/>a,<sp/>T<sp/>b)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/>b;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(b2Max(a.x,<sp/>b.x),<sp/>b2Max(a.y,<sp/>b.y));</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>b2Clamp(T<sp/>a,<sp/>T<sp/>low,<sp/>T<sp/>high)</highlight></codeline>
<codeline lineno="575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Max(low,<sp/>b2Min(a,<sp/>high));</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>b2Clamp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>high)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Max(low,<sp/>b2Min(a,<sp/>high));</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>b2Swap(T&amp;<sp/>a,<sp/>T&amp;<sp/>b)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>tmp<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32<sp/>b2NextPowerOfTwo(uint32<sp/>x)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b2IsPowerOfTwo(uint32<sp/>x)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(x<sp/>&amp;<sp/>(x<sp/>-<sp/>1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a6a78abe0478c9752cd0166df6ec52b1e" kindref="member">b2Sweep::GetTransform</ref>(<ref refid="structb2_transform" kindref="compound">b2Transform</ref>*<sp/>xf,<sp/>float32<sp/>beta)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="613"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;position<sp/>=<sp/>(1.0f<sp/>-<sp/>beta)<sp/>*<sp/>c0<sp/>+<sp/>beta<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>angle<sp/>=<sp/>(1.0f<sp/>-<sp/>beta)<sp/>*<sp/>a0<sp/>+<sp/>beta<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;R.<ref refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" kindref="member" tooltip="Initialize this matrix using columns.">Set</ref>(angle);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>to<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;position<sp/>-=<sp/>b2Mul(xf-&gt;R,<sp/><ref refid="structb2_sweep_1a4bcc302cf78771896d6256fc53f2f8be" kindref="member" tooltip="local center of mass position">localCenter</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a35eb9b976ca87c9b8d758bec070c6c06" kindref="member">b2Sweep::Advance</ref>(float32<sp/>alpha)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2Assert(<ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref><sp/>&lt;<sp/>1.0f);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>beta<sp/>=<sp/>(alpha<sp/>-<sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>)<sp/>/<sp/>(1.0f<sp/>-<sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>(1.0f<sp/>-<sp/>beta)<sp/>*<sp/>c0<sp/>+<sp/>beta<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a0<sp/>=<sp/>(1.0f<sp/>-<sp/>beta)<sp/>*<sp/>a0<sp/>+<sp/>beta<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref><sp/>=<sp/>alpha;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1ad66a3086bc7656df9cf7454013a2f61b" kindref="member" tooltip="Normalize the angles.">b2Sweep::Normalize</ref>()</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>twoPi<sp/>=<sp/>2.0f<sp/>*<sp/>b2_pi;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>d<sp/>=<sp/><sp/>twoPi<sp/>*<sp/>floorf(a0<sp/>/<sp/>twoPi);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a0<sp/>-=<sp/>d;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>d;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="D:/pybox2d/Box2D/Common/b2Math.h"/>
  </compounddef>
</doxygen>
