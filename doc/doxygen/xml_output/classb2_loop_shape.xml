<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.2">
  <compounddef id="classb2_loop_shape" kind="class" prot="public">
    <compoundname>b2LoopShape</compoundname>
    <basecompoundref refid="classb2_shape" prot="public" virt="non-virtual">b2Shape</basecompoundref>
    <includes local="no">b2LoopShape.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classb2_loop_shape_1afc20abf90431c0e56cf06a647d22fbd9" prot="protected" static="no" mutable="no">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> *</type>
        <definition>b2Vec2* b2LoopShape::m_vertices</definition>
        <argsstring></argsstring>
        <name>m_vertices</name>
        <briefdescription>
<para>The vertices. Owned by this class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="82" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classb2_loop_shape_1a1a3ee2cdeb1ae64cf998a20064cb5e00" prot="protected" static="no" mutable="no">
        <type>int32</type>
        <definition>int32 b2LoopShape::m_count</definition>
        <argsstring></argsstring>
        <name>m_count</name>
        <briefdescription>
<para>The vertex count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="85" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classb2_loop_shape_1a02e99e2aba9e85bb8b3ab5b172c8f520" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>b2LoopShape::b2LoopShape</definition>
        <argsstring>()</argsstring>
        <name>b2LoopShape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="34" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a7679c8e95031b327f88c003a00158968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>b2LoopShape::~b2LoopShape</definition>
        <argsstring>()</argsstring>
        <name>~b2LoopShape</name>
        <briefdescription>
<para>The destructor frees the vertices using b2Free. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="37" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a0c3bce4c2d9ecb46f7254f07ff1fc5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2LoopShape::Create</definition>
        <argsstring>(const b2Vec2 *vertices, int32 count)</argsstring>
        <name>Create</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Create the loop shape, copy all vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="40" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1ab9a2476a92138a3b5af8c9fd59fa80f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classb2_shape" kindref="compound">b2Shape</ref> *</type>
        <definition>b2Shape * b2LoopShape::Clone</definition>
        <argsstring>(b2BlockAllocator *allocator) const </argsstring>
        <name>Clone</name>
        <reimplements refid="classb2_shape_1a4716243454bb9cf7c7ee1d9cb23ae634">Clone</reimplements>
        <param>
          <type><ref refid="classb2_block_allocator" kindref="compound">b2BlockAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Implement <ref refid="classb2_shape" kindref="compound">b2Shape</ref>. Vertices are cloned using b2Alloc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="43" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a0f4cc5a2d60b9fbf34828d7d278a2b82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int32</type>
        <definition>int32 b2LoopShape::GetChildCount</definition>
        <argsstring>() const </argsstring>
        <name>GetChildCount</name>
        <reimplements refid="classb2_shape_1a05a3c445017d96df9238ceefe6ce37ab">GetChildCount</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classb2_shape_1a05a3c445017d96df9238ceefe6ce37ab" kindref="member">b2Shape::GetChildCount</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="46" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1ae2eae913758c092e2e1cd81c637730e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2LoopShape::GetChildEdge</definition>
        <argsstring>(b2EdgeShape *edge, int32 index) const </argsstring>
        <name>GetChildEdge</name>
        <param>
          <type><ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref> *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a child edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="49" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="54" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a59aa72ec73022f4343284af459df7947" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool b2LoopShape::TestPoint</definition>
        <argsstring>(const b2Transform &amp;transform, const b2Vec2 &amp;p) const </argsstring>
        <name>TestPoint</name>
        <reimplements refid="classb2_shape_1a6ac968e403e2d93e8ae46d728a2e50fa">TestPoint</reimplements>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This always return false. <simplesect kind="see"><para><ref refid="classb2_shape_1a6ac968e403e2d93e8ae46d728a2e50fa" kindref="member">b2Shape::TestPoint</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="53" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a0060e62049e0700f04317f63f36aaed9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool b2LoopShape::RayCast</definition>
        <argsstring>(b2RayCastOutput *output, const b2RayCastInput &amp;input, const b2Transform &amp;transform, int32 childIndex) const </argsstring>
        <name>RayCast</name>
        <reimplements refid="classb2_shape_1aee53a926f4fe64cd03693f6211ef6335">RayCast</reimplements>
        <param>
          <type><ref refid="structb2_ray_cast_output" kindref="compound">b2RayCastOutput</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_ray_cast_input" kindref="compound">b2RayCastInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>childIndex</declname>
        </param>
        <briefdescription>
<para>Implement <ref refid="classb2_shape" kindref="compound">b2Shape</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="57" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="85" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a159a4cbb26619fc69b84a759a5cedd27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void b2LoopShape::ComputeAABB</definition>
        <argsstring>(b2AABB *aabb, const b2Transform &amp;transform, int32 childIndex) const </argsstring>
        <name>ComputeAABB</name>
        <reimplements refid="classb2_shape_1a88e9807fab0c8ca9a98d8926e50a1411">ComputeAABB</reimplements>
        <param>
          <type><ref refid="structb2_a_a_b_b" kindref="compound">b2AABB</ref> *</type>
          <declname>aabb</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>childIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classb2_shape_1a88e9807fab0c8ca9a98d8926e50a1411" kindref="member">b2Shape::ComputeAABB</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="60" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="105" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a594eeb6cf245f75d82d200f7c260a809" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void b2LoopShape::ComputeMass</definition>
        <argsstring>(b2MassData *massData, float32 density) const </argsstring>
        <name>ComputeMass</name>
        <reimplements refid="classb2_shape_1a61b365526241b47f124789b0309cac69">ComputeMass</reimplements>
        <param>
          <type><ref refid="structb2_mass_data" kindref="compound">b2MassData</ref> *</type>
          <declname>massData</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>density</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chains have zero mass. <simplesect kind="see"><para><ref refid="classb2_shape_1a61b365526241b47f124789b0309cac69" kindref="member">b2Shape::ComputeMass</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="64" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.cpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a814d2be57d69c2f69b67ee7dc751ed5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32</type>
        <definition>int32 b2LoopShape::GetCount</definition>
        <argsstring>() const </argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Get the number of vertices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="67" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1a6c290473932bb99e7017f5b9e8ad78bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
        <definition>const b2Vec2&amp; b2LoopShape::GetVertex</definition>
        <argsstring>(int32 index) const </argsstring>
        <name>GetVertex</name>
        <param>
          <type>int32</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the vertices (read-only). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="71" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classb2_loop_shape_1ab3791135f1c797c4a7ca068666ee3e9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> *</type>
        <definition>const b2Vec2* b2LoopShape::GetVertices</definition>
        <argsstring>() const </argsstring>
        <name>GetVertices</name>
        <briefdescription>
<para>Get the vertices (read-only). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="77" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="77" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A loop shape is a free form sequence of line segments that form a circular list. The loop may cross upon itself, but this is not recommended for smooth collision. The loop has double sided collision, so you can use inside and outside collision. Therefore, you may use any winding order. Since there may be many vertices, they are allocated using b2Alloc. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1673">
        <label>b2LoopShape</label>
        <link refid="classb2_loop_shape"/>
        <childnode refid="1674" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1674">
        <label>b2Shape</label>
        <link refid="classb2_shape"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1677">
        <label>b2Vec2</label>
        <link refid="structb2_vec2"/>
      </node>
      <node id="1675">
        <label>b2LoopShape</label>
        <link refid="classb2_loop_shape"/>
        <childnode refid="1676" relation="public-inheritance">
        </childnode>
        <childnode refid="1677" relation="usage">
          <edgelabel>m_vertices</edgelabel>
        </childnode>
      </node>
      <node id="1676">
        <label>b2Shape</label>
        <link refid="classb2_shape"/>
      </node>
    </collaborationgraph>
    <location file="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" line="32" bodyfile="D:/pybox2d/Box2D/Collision/Shapes/b2LoopShape.h" bodystart="31" bodyend="86"/>
    <listofallmembers>
      <member refid="classb2_loop_shape_1a02e99e2aba9e85bb8b3ab5b172c8f520" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>b2LoopShape</name></member>
      <member refid="classb2_shape_1aa13d55c6c5cf0e11e0a1061cb43611c5" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>b2Shape</name></member>
      <member refid="classb2_loop_shape_1ab9a2476a92138a3b5af8c9fd59fa80f7" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>Clone</name></member>
      <member refid="classb2_loop_shape_1a159a4cbb26619fc69b84a759a5cedd27" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>ComputeAABB</name></member>
      <member refid="classb2_loop_shape_1a594eeb6cf245f75d82d200f7c260a809" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>ComputeMass</name></member>
      <member refid="classb2_loop_shape_1a0c3bce4c2d9ecb46f7254f07ff1fc5f1" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>Create</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0a09ab906cedd1b94ebb6fedb29dace063" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_circle</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0a707a159824d438c541a452382c0daced" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_edge</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0a7a0ad86926552dd390934a9685477f05" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_loop</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0a08afe1f3d5964062239783063a3a671f" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_polygon</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0aad7c674a33e8ca4ee9b717f226553596" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_typeCount</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0a03349b9398be41a31b0c35834d61090d" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>e_unknown</name></member>
      <member refid="classb2_loop_shape_1a0f4cc5a2d60b9fbf34828d7d278a2b82" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>GetChildCount</name></member>
      <member refid="classb2_loop_shape_1ae2eae913758c092e2e1cd81c637730e6" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>GetChildEdge</name></member>
      <member refid="classb2_loop_shape_1a814d2be57d69c2f69b67ee7dc751ed5a" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>GetCount</name></member>
      <member refid="classb2_shape_1a3b6093f16c18f8a877519a29674abca0" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>GetType</name></member>
      <member refid="classb2_loop_shape_1a6c290473932bb99e7017f5b9e8ad78bf" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>GetVertex</name></member>
      <member refid="classb2_loop_shape_1ab3791135f1c797c4a7ca068666ee3e9a" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>GetVertices</name></member>
      <member refid="classb2_loop_shape_1a1a3ee2cdeb1ae64cf998a20064cb5e00" prot="protected" virt="non-virtual"><scope>b2LoopShape</scope><name>m_count</name></member>
      <member refid="classb2_shape_1a5de7a9bd3f9e72ef7025a65c304aaf1a" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>m_radius</name></member>
      <member refid="classb2_shape_1adb051791133b24f53c6e9a565a7b7bbb" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>m_type</name></member>
      <member refid="classb2_loop_shape_1afc20abf90431c0e56cf06a647d22fbd9" prot="protected" virt="non-virtual"><scope>b2LoopShape</scope><name>m_vertices</name></member>
      <member refid="classb2_loop_shape_1a0060e62049e0700f04317f63f36aaed9" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>RayCast</name></member>
      <member refid="classb2_loop_shape_1a59aa72ec73022f4343284af459df7947" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>TestPoint</name></member>
      <member refid="classb2_shape_1a4c1f3a9ad6b3150bb90ad9018ca4b1e0" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>Type</name></member>
      <member refid="classb2_loop_shape_1a7679c8e95031b327f88c003a00158968" prot="public" virt="non-virtual"><scope>b2LoopShape</scope><name>~b2LoopShape</name></member>
      <member refid="classb2_shape_1a7c14c5dcf134d22e0b5790518632d05a" prot="public" virt="virtual"><scope>b2LoopShape</scope><name>~b2Shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
