<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.2">
  <compounddef id="b2_distance_joint_8cpp" kind="file">
    <compoundname>b2DistanceJoint.cpp</compoundname>
    <includes refid="b2_distance_joint_8h" local="no">Box2D/Dynamics/Joints/b2DistanceJoint.h</includes>
    <includes refid="b2_body_8h" local="no">Box2D/Dynamics/b2Body.h</includes>
    <includes refid="b2_time_step_8h" local="no">Box2D/Dynamics/b2TimeStep.h</includes>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2006-2007<sp/>Erin<sp/>Catto<sp/>http://www.gphysics.com</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Box2D/Dynamics/Joints/b2DistanceJoint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Box2D/Dynamics/b2Body.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Box2D/Dynamics/b2TimeStep.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1-D<sp/>constrained<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>m<sp/>(v2<sp/>-<sp/>v1)<sp/>=<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>v2<sp/>+<sp/>(beta/h)<sp/>*<sp/>x1<sp/>+<sp/>gamma<sp/>*<sp/>lambda<sp/>=<sp/>0,<sp/>gamma<sp/>has<sp/>units<sp/>of<sp/>inverse<sp/>mass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>x2<sp/>=<sp/>x1<sp/>+<sp/>h<sp/>*<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1-D<sp/>mass-damper-spring<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>m<sp/>(v2<sp/>-<sp/>v1)<sp/>+<sp/>h<sp/>*<sp/>d<sp/>*<sp/>v2<sp/>+<sp/>h<sp/>*<sp/>k<sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>=<sp/>norm(p2<sp/>-<sp/>p1)<sp/>-<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>u<sp/>=<sp/>(p2<sp/>-<sp/>p1)<sp/>/<sp/>norm(p2<sp/>-<sp/>p1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cdot<sp/>=<sp/>dot(u,<sp/>v2<sp/>+<sp/>cross(w2,<sp/>r2)<sp/>-<sp/>v1<sp/>-<sp/>cross(w1,<sp/>r1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>J<sp/>=<sp/>[-u<sp/>-cross(r1,<sp/>u)<sp/>u<sp/>cross(r2,<sp/>u)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>K<sp/>=<sp/>J<sp/>*<sp/>invM<sp/>*<sp/>JT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>=<sp/>invMass1<sp/>+<sp/>invI1<sp/>*<sp/>cross(r1,<sp/>u)^2<sp/>+<sp/>invMass2<sp/>+<sp/>invI2<sp/>*<sp/>cross(r2,<sp/>u)^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_distance_joint_def_1a99788a534638cc28cd1e44e0036503f0" kindref="member">b2DistanceJointDef::Initialize</ref>(<ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b1,<sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b2,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>anchor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>anchor2)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_joint_def_1a8cd54c93da396be75a9788f2c6897f05" kindref="member" tooltip="The first attached body.">bodyA</ref><sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_joint_def_1aa4f4dee2fbcd12187b19506b60e68e3d" kindref="member" tooltip="The second attached body.">bodyB</ref><sp/>=<sp/>b2;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_distance_joint_def_1a15c7a75fa277e2056bf1b44198658518" kindref="member" tooltip="The local anchor point relative to body1&amp;#39;s origin.">localAnchorA</ref><sp/>=<sp/><ref refid="structb2_joint_def_1a8cd54c93da396be75a9788f2c6897f05" kindref="member" tooltip="The first attached body.">bodyA</ref>-&gt;<ref refid="classb2_body_1a8f9ef0226b7eb989e700fa8898d29fc0" kindref="member">GetLocalPoint</ref>(anchor1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_distance_joint_def_1a3c8995be726238eee084af750442255c" kindref="member" tooltip="The local anchor point relative to body2&amp;#39;s origin.">localAnchorB</ref><sp/>=<sp/><ref refid="structb2_joint_def_1aa4f4dee2fbcd12187b19506b60e68e3d" kindref="member" tooltip="The second attached body.">bodyB</ref>-&gt;<ref refid="classb2_body_1a8f9ef0226b7eb989e700fa8898d29fc0" kindref="member">GetLocalPoint</ref>(anchor2);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>d<sp/>=<sp/>anchor2<sp/>-<sp/>anchor1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_distance_joint_def_1ac2c48ad52de91c804c386c12c5bf3714" kindref="member" tooltip="The natural length between the anchor points.">length</ref><sp/>=<sp/>d.<ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">b2DistanceJoint::b2DistanceJoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_distance_joint_def" kindref="compound">b2DistanceJointDef</ref>*<sp/>def)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">:<sp/><ref refid="classb2_joint" kindref="compound">b2Joint</ref>(def)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_localAnchor1<sp/>=<sp/>def-&gt;<ref refid="structb2_distance_joint_def_1a15c7a75fa277e2056bf1b44198658518" kindref="member" tooltip="The local anchor point relative to body1&amp;#39;s origin.">localAnchorA</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_localAnchor2<sp/>=<sp/>def-&gt;<ref refid="structb2_distance_joint_def_1a3c8995be726238eee084af750442255c" kindref="member" tooltip="The local anchor point relative to body2&amp;#39;s origin.">localAnchorB</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_length<sp/>=<sp/>def-&gt;<ref refid="structb2_distance_joint_def_1ac2c48ad52de91c804c386c12c5bf3714" kindref="member" tooltip="The natural length between the anchor points.">length</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_frequencyHz<sp/>=<sp/>def-&gt;<ref refid="structb2_distance_joint_def_1a35e2362bcb6c58734f95d0ac045863ea" kindref="member" tooltip="The mass-spring-damper frequency in Hertz.">frequencyHz</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dampingRatio<sp/>=<sp/>def-&gt;<ref refid="structb2_distance_joint_def_1ad009b24ff211158eb4e1db4815a63b94" kindref="member" tooltip="The damping ratio. 0 = no damping, 1 = critical damping.">dampingRatio</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impulse<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_gamma<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bias<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>b2DistanceJoint::InitVelocityConstraints(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_time_step" kindref="compound" tooltip="This is an internal structure.">b2TimeStep</ref>&amp;<sp/>step)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b1<sp/>=<sp/>m_bodyA;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b2<sp/>=<sp/>m_bodyB;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>effective<sp/>mass<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r1<sp/>=<sp/>b2Mul(b1-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor1<sp/>-<sp/>b1-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r2<sp/>=<sp/>b2Mul(b2-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor2<sp/>-<sp/>b2-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_u<sp/>=<sp/>b2-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>+<sp/>r2<sp/>-<sp/>b1-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>-<sp/>r1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>singularity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>length<sp/>=<sp/>m_u.<ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/><ref refid="b2_settings_8h_1a57268ade379c5c3373d0ff558b0350cf" kindref="member">b2_linearSlop</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_u<sp/>*=<sp/>1.0f<sp/>/<sp/>length;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_u.Set(0.0f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>cr1u<sp/>=<sp/>b2Cross(r1,<sp/>m_u);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>cr2u<sp/>=<sp/>b2Cross(r2,<sp/>m_u);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>invMass<sp/>=<sp/>b1-&gt;m_invMass<sp/>+<sp/>b1-&gt;m_invI<sp/>*<sp/>cr1u<sp/>*<sp/>cr1u<sp/>+<sp/>b2-&gt;m_invMass<sp/>+<sp/>b2-&gt;m_invI<sp/>*<sp/>cr2u<sp/>*<sp/>cr2u;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mass<sp/>=<sp/>invMass<sp/>!=<sp/>0.0f<sp/>?<sp/>1.0f<sp/>/<sp/>invMass<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_frequencyHz<sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>C<sp/>=<sp/>length<sp/>-<sp/>m_length;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>omega<sp/>=<sp/>2.0f<sp/>*<sp/>b2_pi<sp/>*<sp/>m_frequencyHz;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Damping<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>d<sp/>=<sp/>2.0f<sp/>*<sp/>m_mass<sp/>*<sp/>m_dampingRatio<sp/>*<sp/>omega;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Spring<sp/>stiffness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>k<sp/>=<sp/>m_mass<sp/>*<sp/>omega<sp/>*<sp/>omega;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>magic<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_gamma<sp/>=<sp/>step.dt<sp/>*<sp/>(d<sp/>+<sp/>step.dt<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_gamma<sp/>=<sp/>m_gamma<sp/>!=<sp/>0.0f<sp/>?<sp/>1.0f<sp/>/<sp/>m_gamma<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bias<sp/>=<sp/>C<sp/>*<sp/>step.dt<sp/>*<sp/>k<sp/>*<sp/>m_gamma;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mass<sp/>=<sp/>invMass<sp/>+<sp/>m_gamma;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mass<sp/>=<sp/>m_mass<sp/>!=<sp/>0.0f<sp/>?<sp/>1.0f<sp/>/<sp/>m_mass<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(step.warmStarting)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>the<sp/>impulse<sp/>to<sp/>support<sp/>a<sp/>variable<sp/>time<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impulse<sp/>*=<sp/>step.dtRatio;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>P<sp/>=<sp/>m_impulse<sp/>*<sp/>m_u;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_linearVelocity<sp/>-=<sp/>b1-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_angularVelocity<sp/>-=<sp/>b1-&gt;m_invI<sp/>*<sp/>b2Cross(r1,<sp/>P);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_linearVelocity<sp/>+=<sp/>b2-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_angularVelocity<sp/>+=<sp/>b2-&gt;m_invI<sp/>*<sp/>b2Cross(r2,<sp/>P);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impulse<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>b2DistanceJoint::SolveVelocityConstraints(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_time_step" kindref="compound" tooltip="This is an internal structure.">b2TimeStep</ref>&amp;<sp/>step)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B2_NOT_USED(step);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b1<sp/>=<sp/>m_bodyA;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b2<sp/>=<sp/>m_bodyB;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r1<sp/>=<sp/>b2Mul(b1-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor1<sp/>-<sp/>b1-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r2<sp/>=<sp/>b2Mul(b2-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor2<sp/>-<sp/>b2-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cdot<sp/>=<sp/>dot(u,<sp/>v<sp/>+<sp/>cross(w,<sp/>r))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>v1<sp/>=<sp/>b1-&gt;m_linearVelocity<sp/>+<sp/>b2Cross(b1-&gt;m_angularVelocity,<sp/>r1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>v2<sp/>=<sp/>b2-&gt;m_linearVelocity<sp/>+<sp/>b2Cross(b2-&gt;m_angularVelocity,<sp/>r2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>Cdot<sp/>=<sp/>b2Dot(m_u,<sp/>v2<sp/>-<sp/>v1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>impulse<sp/>=<sp/>-m_mass<sp/>*<sp/>(Cdot<sp/>+<sp/>m_bias<sp/>+<sp/>m_gamma<sp/>*<sp/>m_impulse);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_impulse<sp/>+=<sp/>impulse;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>P<sp/>=<sp/>impulse<sp/>*<sp/>m_u;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_linearVelocity<sp/>-=<sp/>b1-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_angularVelocity<sp/>-=<sp/>b1-&gt;m_invI<sp/>*<sp/>b2Cross(r1,<sp/>P);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_linearVelocity<sp/>+=<sp/>b2-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_angularVelocity<sp/>+=<sp/>b2-&gt;m_invI<sp/>*<sp/>b2Cross(r2,<sp/>P);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b2DistanceJoint::SolvePositionConstraints(float32<sp/>baumgarte)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B2_NOT_USED(baumgarte);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_frequencyHz<sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>position<sp/>correction<sp/>for<sp/>soft<sp/>distance<sp/>constraints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b1<sp/>=<sp/>m_bodyA;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classb2_body" kindref="compound" tooltip="A rigid body. These are created via b2World::CreateBody.">b2Body</ref>*<sp/>b2<sp/>=<sp/>m_bodyB;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r1<sp/>=<sp/>b2Mul(b1-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor1<sp/>-<sp/>b1-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>r2<sp/>=<sp/>b2Mul(b2-&gt;<ref refid="classb2_body_1adaaebca750d0bda56a543884adc5f519" kindref="member">GetTransform</ref>().R,<sp/>m_localAnchor2<sp/>-<sp/>b2-&gt;<ref refid="classb2_body_1a27ed7f8a3b36ddfb01069ee8f7106033" kindref="member" tooltip="Get the local position of the center of mass.">GetLocalCenter</ref>());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>d<sp/>=<sp/>b2-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>+<sp/>r2<sp/>-<sp/>b1-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>-<sp/>r1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>length<sp/>=<sp/>d.<ref refid="structb2_vec2_1adda78c92f318fe53d8a53f9b5cfd8e41" kindref="member" tooltip="Convert this vector into a unit vector. Returns the length.">Normalize</ref>();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>C<sp/>=<sp/>length<sp/>-<sp/>m_length;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>b2Clamp(C,<sp/>-<ref refid="b2_settings_8h_1a23ab70e4809f5ee23abcd52018d5eb88" kindref="member">b2_maxLinearCorrection</ref>,<sp/><ref refid="b2_settings_8h_1a23ab70e4809f5ee23abcd52018d5eb88" kindref="member">b2_maxLinearCorrection</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>impulse<sp/>=<sp/>-m_mass<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_u<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>P<sp/>=<sp/>impulse<sp/>*<sp/>m_u;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>-=<sp/>b1-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;m_sweep.<ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref><sp/>-=<sp/>b1-&gt;m_invI<sp/>*<sp/>b2Cross(r1,<sp/>P);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_sweep.<ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref><sp/>+=<sp/>b2-&gt;m_invMass<sp/>*<sp/>P;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;m_sweep.<ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref><sp/>+=<sp/>b2-&gt;m_invI<sp/>*<sp/>b2Cross(r2,<sp/>P);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1-&gt;SynchronizeTransform();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2-&gt;SynchronizeTransform();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b2Abs(C)<sp/>&lt;<sp/><ref refid="b2_settings_8h_1a57268ade379c5c3373d0ff558b0350cf" kindref="member">b2_linearSlop</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="classb2_distance_joint_1a66c1cb4deff1166c1dab67df6047a89c" kindref="member" tooltip="Get the anchor point on bodyA in world coordinates.">b2DistanceJoint::GetAnchorA</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="192"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bodyA-&gt;<ref refid="classb2_body_1a8055b90bccb51383caa8c42fbc96c9c3" kindref="member">GetWorldPoint</ref>(m_localAnchor1);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="classb2_distance_joint_1afc58d85cf7cc5e23082cf469e1a1a067" kindref="member" tooltip="Get the anchor point on bodyB in world coordinates.">b2DistanceJoint::GetAnchorB</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bodyB-&gt;<ref refid="classb2_body_1a8055b90bccb51383caa8c42fbc96c9c3" kindref="member">GetWorldPoint</ref>(m_localAnchor2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="classb2_distance_joint_1a99413cc114b2f4dc4ce7693c062ce226" kindref="member">b2DistanceJoint::GetReactionForce</ref>(float32<sp/>inv_dt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="202"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>F<sp/>=<sp/>(inv_dt<sp/>*<sp/>m_impulse)<sp/>*<sp/>m_u;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">float32<sp/><ref refid="classb2_distance_joint_1a8d65840abe0b398399020524852788fd" kindref="member">b2DistanceJoint::GetReactionTorque</ref>(float32<sp/>inv_dt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="208"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B2_NOT_USED(inv_dt);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/pybox2d/Box2D/Dynamics/Joints/b2DistanceJoint.cpp"/>
  </compounddef>
</doxygen>
