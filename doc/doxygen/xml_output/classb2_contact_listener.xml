<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.2">
  <compounddef id="classb2_contact_listener" kind="class" prot="public">
    <compoundname>b2ContactListener</compoundname>
    <includes local="no">b2WorldCallbacks.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classb2_contact_listener_1ac823a8fc3da242814ee649c093c74e21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual b2ContactListener::~b2ContactListener</definition>
        <argsstring>()</argsstring>
        <name>~b2ContactListener</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="83" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classb2_contact_listener_1a35148fc56fb9eac12077200fbd928f65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void b2ContactListener::BeginContact</definition>
        <argsstring>(b2Contact *contact)</argsstring>
        <name>BeginContact</name>
        <param>
          <type><ref refid="classb2_contact" kindref="compound">b2Contact</ref> *</type>
          <declname>contact</declname>
        </param>
        <briefdescription>
<para>Called when two fixtures begin to touch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="86" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classb2_contact_listener_1afb3059058e5c47903a3947c2eef5826b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void b2ContactListener::EndContact</definition>
        <argsstring>(b2Contact *contact)</argsstring>
        <name>EndContact</name>
        <param>
          <type><ref refid="classb2_contact" kindref="compound">b2Contact</ref> *</type>
          <declname>contact</declname>
        </param>
        <briefdescription>
<para>Called when two fixtures cease to touch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="89" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classb2_contact_listener_1a416f85eb45a1099053402b15a19a7de0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void b2ContactListener::PreSolve</definition>
        <argsstring>(b2Contact *contact, const b2Manifold *oldManifold)</argsstring>
        <name>PreSolve</name>
        <param>
          <type><ref refid="classb2_contact" kindref="compound">b2Contact</ref> *</type>
          <declname>contact</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>oldManifold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. disable contact). A copy of the old manifold is provided so that you can detect changes. Note: this is called only for awake bodies. Note: this is called even when the number of contact points is zero. Note: this is not called for sensors. Note: if you set the number of contact points to zero, you will not get an EndContact callback. However, you may get a BeginContact callback the next step. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="102" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classb2_contact_listener_1acd58ec96f7569b95eec65b8ca3f8013d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void b2ContactListener::PostSolve</definition>
        <argsstring>(b2Contact *contact, const b2ContactImpulse *impulse)</argsstring>
        <name>PostSolve</name>
        <param>
          <type><ref refid="classb2_contact" kindref="compound">b2Contact</ref> *</type>
          <declname>contact</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_contact_impulse" kindref="compound">b2ContactImpulse</ref> *</type>
          <declname>impulse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This lets you inspect a contact after the solver is finished. This is useful for inspecting impulses. Note: the contact manifold does not include time of impact impulses, which can be arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly in a separate data structure. Note: this is only called for contacts that are touching, solid, and awake. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="114" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="113" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implement this class to get contact information. You can use these results for things like sounds and game logic. You can also get contact results by traversing the contact lists after the time step. However, you might miss some contacts because continuous physics leads to sub-stepping. Additionally you may receive multiple callbacks for the same contact in a single time step. You should strive to make your callbacks efficient because there may be many callbacks per time step. <simplesect kind="warning"><para>You cannot create/destroy Box2D entities inside these callbacks. </para></simplesect>
</para>    </detaileddescription>
    <location file="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" line="81" bodyfile="D:/pybox2d/Box2D/Dynamics/b2WorldCallbacks.h" bodystart="80" bodyend="118"/>
    <listofallmembers>
      <member refid="classb2_contact_listener_1a35148fc56fb9eac12077200fbd928f65" prot="public" virt="virtual"><scope>b2ContactListener</scope><name>BeginContact</name></member>
      <member refid="classb2_contact_listener_1afb3059058e5c47903a3947c2eef5826b" prot="public" virt="virtual"><scope>b2ContactListener</scope><name>EndContact</name></member>
      <member refid="classb2_contact_listener_1acd58ec96f7569b95eec65b8ca3f8013d" prot="public" virt="virtual"><scope>b2ContactListener</scope><name>PostSolve</name></member>
      <member refid="classb2_contact_listener_1a416f85eb45a1099053402b15a19a7de0" prot="public" virt="virtual"><scope>b2ContactListener</scope><name>PreSolve</name></member>
      <member refid="classb2_contact_listener_1ac823a8fc3da242814ee649c093c74e21" prot="public" virt="virtual"><scope>b2ContactListener</scope><name>~b2ContactListener</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
